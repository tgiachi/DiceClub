// <auto-generated />
using System;
using DiceClub.Api.Data.Mtg;
using DiceClub.Database.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using NpgsqlTypes;

#nullable disable

namespace DiceClub.Database.Migrations
{
    [DbContext(typeof(DiceClubDbContext))]
    [Migration("20221022135436_AddedInventoryMovements")]
    partial class AddedInventoryMovements
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DiceClub.Database.Entities.Account.DiceClubGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("group_name");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("boolean")
                        .HasColumnName("is_admin");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_groups");

                    b.ToTable("groups", (string)null);
                });

            modelBuilder.Entity("DiceClub.Database.Entities.Account.DiceClubUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Last")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("last");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("NickName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nick_name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("password");

                    b.Property<string>("RefreshToken")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("refresh_token");

                    b.Property<string>("SerialId")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("serial_id");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_users_email");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("DiceClub.Database.Entities.Account.UserGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("group_id");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_groups");

                    b.HasIndex("GroupId")
                        .HasDatabaseName("ix_user_groups_group_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_groups_user_id");

                    b.ToTable("user_groups", (string)null);
                });

            modelBuilder.Entity("DiceClub.Database.Entities.Deck.DeckDetailEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CardId")
                        .HasColumnType("uuid")
                        .HasColumnName("card_id");

                    b.Property<string>("CardType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("card_type");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<Guid>("DeckMasterId")
                        .HasColumnType("uuid")
                        .HasColumnName("deck_master_id");

                    b.Property<long>("Quantity")
                        .HasColumnType("bigint")
                        .HasColumnName("quantity");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_deck_details");

                    b.HasIndex("CardId")
                        .HasDatabaseName("ix_deck_details_card_id");

                    b.HasIndex("DeckMasterId")
                        .HasDatabaseName("ix_deck_details_deck_master_id");

                    b.ToTable("deck_details", (string)null);
                });

            modelBuilder.Entity("DiceClub.Database.Entities.Deck.DeckMasterEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("CardCount")
                        .HasColumnType("integer")
                        .HasColumnName("card_count");

                    b.Property<string>("ColorIdentity")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("color_identity");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Format")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("format");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("owner_id");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_deck_master");

                    b.HasIndex("OwnerId")
                        .HasDatabaseName("ix_deck_master_owner_id");

                    b.HasIndex("Name", "OwnerId")
                        .HasDatabaseName("ix_deck_master_name_owner_id");

                    b.ToTable("deck_master", (string)null);
                });

            modelBuilder.Entity("DiceClub.Database.Entities.Inventory.InventoryCategoryEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("name");

                    b.Property<string>("ParserClassType")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)")
                        .HasColumnName("parser_class_type");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_inventory_categories");

                    b.ToTable("inventory_categories", (string)null);
                });

            modelBuilder.Entity("DiceClub.Database.Entities.Inventory.InventoryEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("category_id");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("description");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("image_url");

                    b.Property<string>("InventoryCode")
                        .HasColumnType("text")
                        .HasColumnName("inventory_code");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean")
                        .HasColumnName("is_locked");

                    b.Property<string>("Sku")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("sku");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("title");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_inventories");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("ix_inventories_category_id");

                    b.HasIndex("Sku")
                        .IsUnique()
                        .HasDatabaseName("ix_inventories_sku");

                    b.ToTable("inventories", (string)null);
                });

            modelBuilder.Entity("DiceClub.Database.Entities.Inventory.InventoryMovementEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("end_date");

                    b.Property<Guid>("InventoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("inventory_id");

                    b.Property<Guid>("ReceiverId")
                        .HasColumnType("uuid")
                        .HasColumnName("receiver_id");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uuid")
                        .HasColumnName("sender_id");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("start_date");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_inventory_movements");

                    b.HasIndex("InventoryId")
                        .HasDatabaseName("ix_inventory_movements_inventory_id");

                    b.HasIndex("ReceiverId")
                        .HasDatabaseName("ix_inventory_movements_receiver_id");

                    b.HasIndex("SenderId")
                        .HasDatabaseName("ix_inventory_movements_sender_id");

                    b.ToTable("inventory_movements", (string)null);
                });

            modelBuilder.Entity("DiceClub.Database.Entities.Inventory.InventoryQuantityEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<Guid>("InventoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("inventory_id");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("owner_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_inventory_quantities");

                    b.HasIndex("InventoryId")
                        .HasDatabaseName("ix_inventory_quantities_inventory_id");

                    b.HasIndex("OwnerId")
                        .HasDatabaseName("ix_inventory_quantities_owner_id");

                    b.ToTable("inventory_quantities", (string)null);
                });

            modelBuilder.Entity("DiceClub.Database.Entities.MtgCards.MtgCardColorEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("description");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("image_url");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_mtg_colors");

                    b.ToTable("mtg_colors", (string)null);
                });

            modelBuilder.Entity("DiceClub.Database.Entities.MtgCards.MtgCardColorRelEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CardId")
                        .HasColumnType("uuid")
                        .HasColumnName("card_id");

                    b.Property<Guid>("ColorId")
                        .HasColumnType("uuid")
                        .HasColumnName("color_id");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_mtg_colors_cards");

                    b.HasIndex("CardId")
                        .HasDatabaseName("ix_mtg_colors_cards_card_id");

                    b.HasIndex("ColorId")
                        .HasDatabaseName("ix_mtg_colors_cards_color_id");

                    b.ToTable("mtg_colors_cards", (string)null);
                });

            modelBuilder.Entity("DiceClub.Database.Entities.MtgCards.MtgCardEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int?>("CardMarketId")
                        .HasColumnType("integer")
                        .HasColumnName("card_market_id");

                    b.Property<decimal?>("Cmc")
                        .HasColumnType("numeric")
                        .HasColumnName("cmc");

                    b.Property<int?>("CollectorNumber")
                        .HasColumnType("integer")
                        .HasColumnName("collector_number");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("ForeignNames")
                        .IsRequired()
                        .HasMaxLength(600)
                        .HasColumnType("character varying(600)")
                        .HasColumnName("foreign_names");

                    b.Property<string>("HighResImageUrl")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("high_res_image_url");

                    b.Property<bool>("IsColorLess")
                        .HasColumnType("boolean")
                        .HasColumnName("is_color_less");

                    b.Property<bool>("IsMultiColor")
                        .HasColumnType("boolean")
                        .HasColumnName("is_multi_color");

                    b.Property<Guid>("LanguageId")
                        .HasColumnType("uuid")
                        .HasColumnName("language_id");

                    b.Property<string>("LowResImageUrl")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("low_res_image_url");

                    b.Property<string>("ManaCost")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("mana_cost");

                    b.Property<int?>("MtgId")
                        .HasColumnType("integer")
                        .HasColumnName("mtg_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("name");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("owner_id");

                    b.Property<int?>("Power")
                        .HasColumnType("integer")
                        .HasColumnName("power");

                    b.Property<decimal?>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<string>("PrintedName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("printed_name");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<Guid>("RarityId")
                        .HasColumnType("uuid")
                        .HasColumnName("rarity_id");

                    b.Property<string>("ScryfallId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("scryfall_id");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasColumnName("search_vector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "italian")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name", "Description", "TypeLine", "PrintedName", "ForeignNames" });

                    b.Property<Guid>("SetId")
                        .HasColumnType("uuid")
                        .HasColumnName("set_id");

                    b.Property<int?>("Toughness")
                        .HasColumnType("integer")
                        .HasColumnName("toughness");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("type_id");

                    b.Property<string>("TypeLine")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type_line");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_mtg_cards");

                    b.HasIndex("LanguageId")
                        .HasDatabaseName("ix_mtg_cards_language_id");

                    b.HasIndex("OwnerId")
                        .HasDatabaseName("ix_mtg_cards_owner_id");

                    b.HasIndex("RarityId")
                        .HasDatabaseName("ix_mtg_cards_rarity_id");

                    b.HasIndex("ScryfallId")
                        .HasDatabaseName("ix_mtg_cards_scryfall_id");

                    b.HasIndex("SearchVector")
                        .HasDatabaseName("ix_mtg_cards_search_vector");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("SearchVector"), "GIN");

                    b.HasIndex("SetId")
                        .HasDatabaseName("ix_mtg_cards_set_id");

                    b.HasIndex("Name", "PrintedName")
                        .HasDatabaseName("ix_mtg_cards_name_printed_name");

                    b.HasIndex("TypeId", "RarityId", "SetId")
                        .HasDatabaseName("ix_mtg_cards_type_id_rarity_id_set_id");

                    b.ToTable("mtg_cards", (string)null);
                });

            modelBuilder.Entity("DiceClub.Database.Entities.MtgCards.MtgCardLanguageEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_mtg_languages");

                    b.ToTable("mtg_languages", (string)null);
                });

            modelBuilder.Entity("DiceClub.Database.Entities.MtgCards.MtgCardLegalityEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_mtg_legalities");

                    b.ToTable("mtg_legalities", (string)null);
                });

            modelBuilder.Entity("DiceClub.Database.Entities.MtgCards.MtgCardLegalityRelEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CardId")
                        .HasColumnType("uuid")
                        .HasColumnName("card_id");

                    b.Property<Guid>("CardLegalityId")
                        .HasColumnType("uuid")
                        .HasColumnName("card_legality_id");

                    b.Property<Guid>("CardLegalityTypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("card_legality_type_id");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_mtg_cards_legalities");

                    b.HasIndex("CardId")
                        .HasDatabaseName("ix_mtg_cards_legalities_card_id");

                    b.HasIndex("CardLegalityId")
                        .HasDatabaseName("ix_mtg_cards_legalities_card_legality_id");

                    b.HasIndex("CardLegalityTypeId")
                        .HasDatabaseName("ix_mtg_cards_legalities_card_legality_type_id");

                    b.ToTable("mtg_cards_legalities", (string)null);
                });

            modelBuilder.Entity("DiceClub.Database.Entities.MtgCards.MtgCardLegalityTypeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_mtg_card_legality_types");

                    b.ToTable("mtg_card_legality_types", (string)null);
                });

            modelBuilder.Entity("DiceClub.Database.Entities.MtgCards.MtgCardRarityEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Image")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("image");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_mtg_rarities");

                    b.ToTable("mtg_rarities", (string)null);
                });

            modelBuilder.Entity("DiceClub.Database.Entities.MtgCards.MtgCardSetEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("CardCount")
                        .HasColumnType("integer")
                        .HasColumnName("card_count");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("description");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("image");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_mtg_sets");

                    b.ToTable("mtg_sets", (string)null);
                });

            modelBuilder.Entity("DiceClub.Database.Entities.MtgCards.MtgCardStageEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CardName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("card_name");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("image_url");

                    b.Property<bool>("IsAdded")
                        .HasColumnType("boolean")
                        .HasColumnName("is_added");

                    b.Property<bool>("IsFoil")
                        .HasColumnType("boolean")
                        .HasColumnName("is_foil");

                    b.Property<Guid>("LanguageId")
                        .HasColumnType("uuid")
                        .HasColumnName("language_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<string>("ScryfallId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("scryfall_id");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_cards_staging");

                    b.HasIndex("LanguageId")
                        .HasDatabaseName("ix_cards_staging_language_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_cards_staging_user_id");

                    b.ToTable("cards_staging", (string)null);
                });

            modelBuilder.Entity("DiceClub.Database.Entities.MtgCards.MtgCardSymbolEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("description");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("image");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("symbol");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_mtg_symbols");

                    b.ToTable("mtg_symbols", (string)null);
                });

            modelBuilder.Entity("DiceClub.Database.Entities.MtgCards.MtgCardTypeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_mtg_card_types");

                    b.ToTable("mtg_card_types", (string)null);
                });

            modelBuilder.Entity("DiceClub.Database.Entities.MtgCards.MtgDumpEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<MtgCard>("Card")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("card");

                    b.Property<string>("CardName")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("card_name");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("ForeignNames")
                        .IsRequired()
                        .HasMaxLength(3000)
                        .HasColumnType("character varying(3000)")
                        .HasColumnName("foreign_names");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text")
                        .HasColumnName("image_url");

                    b.Property<int?>("MultiverseId")
                        .HasColumnType("integer")
                        .HasColumnName("multiverse_id");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasColumnName("search_vector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "italian")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "CardName", "ForeignNames" });

                    b.Property<string>("SetCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("set_code");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_mtg_cards_dump");

                    b.HasIndex("SearchVector")
                        .HasDatabaseName("ix_mtg_cards_dump_search_vector");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("SearchVector"), "GIN");

                    b.ToTable("mtg_cards_dump", (string)null);
                });

            modelBuilder.Entity("DiceClub.Database.Entities.Account.UserGroup", b =>
                {
                    b.HasOne("DiceClub.Database.Entities.Account.DiceClubGroup", "Group")
                        .WithMany("UserGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_groups_groups_group_id");

                    b.HasOne("DiceClub.Database.Entities.Account.DiceClubUser", "User")
                        .WithMany("UserGroups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_groups_users_user_id");

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DiceClub.Database.Entities.Deck.DeckDetailEntity", b =>
                {
                    b.HasOne("DiceClub.Database.Entities.MtgCards.MtgCardEntity", "Card")
                        .WithMany()
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_deck_details_mtg_cards_card_id");

                    b.HasOne("DiceClub.Database.Entities.Deck.DeckMasterEntity", "DeckMaster")
                        .WithMany("Details")
                        .HasForeignKey("DeckMasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_deck_details_deck_master_deck_master_id");

                    b.Navigation("Card");

                    b.Navigation("DeckMaster");
                });

            modelBuilder.Entity("DiceClub.Database.Entities.Deck.DeckMasterEntity", b =>
                {
                    b.HasOne("DiceClub.Database.Entities.Account.DiceClubUser", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_deck_master_users_owner_id");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("DiceClub.Database.Entities.Inventory.InventoryEntity", b =>
                {
                    b.HasOne("DiceClub.Database.Entities.Inventory.InventoryCategoryEntity", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_inventories_inventory_categories_category_id");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("DiceClub.Database.Entities.Inventory.InventoryMovementEntity", b =>
                {
                    b.HasOne("DiceClub.Database.Entities.Inventory.InventoryEntity", "Inventory")
                        .WithMany()
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_inventory_movements_inventories_inventory_id");

                    b.HasOne("DiceClub.Database.Entities.Account.DiceClubUser", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_inventory_movements_users_receiver_id");

                    b.HasOne("DiceClub.Database.Entities.Account.DiceClubUser", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_inventory_movements_users_sender_id");

                    b.Navigation("Inventory");

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("DiceClub.Database.Entities.Inventory.InventoryQuantityEntity", b =>
                {
                    b.HasOne("DiceClub.Database.Entities.Inventory.InventoryEntity", "Inventory")
                        .WithMany()
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_inventory_quantities_inventories_inventory_id");

                    b.HasOne("DiceClub.Database.Entities.Account.DiceClubUser", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_inventory_quantities_users_owner_id");

                    b.Navigation("Inventory");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("DiceClub.Database.Entities.MtgCards.MtgCardColorRelEntity", b =>
                {
                    b.HasOne("DiceClub.Database.Entities.MtgCards.MtgCardEntity", "Card")
                        .WithMany("Colors")
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_mtg_colors_cards_mtg_cards_card_id");

                    b.HasOne("DiceClub.Database.Entities.MtgCards.MtgCardColorEntity", "Color")
                        .WithMany()
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_mtg_colors_cards_mtg_colors_color_id");

                    b.Navigation("Card");

                    b.Navigation("Color");
                });

            modelBuilder.Entity("DiceClub.Database.Entities.MtgCards.MtgCardEntity", b =>
                {
                    b.HasOne("DiceClub.Database.Entities.MtgCards.MtgCardLanguageEntity", "Language")
                        .WithMany("Cards")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_mtg_cards_mtg_languages_language_id");

                    b.HasOne("DiceClub.Database.Entities.Account.DiceClubUser", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_mtg_cards_users_owner_id");

                    b.HasOne("DiceClub.Database.Entities.MtgCards.MtgCardRarityEntity", "Rarity")
                        .WithMany()
                        .HasForeignKey("RarityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_mtg_cards_mtg_rarities_rarity_id");

                    b.HasOne("DiceClub.Database.Entities.MtgCards.MtgCardSetEntity", "Set")
                        .WithMany()
                        .HasForeignKey("SetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_mtg_cards_mtg_sets_set_id");

                    b.HasOne("DiceClub.Database.Entities.MtgCards.MtgCardTypeEntity", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_mtg_cards_mtg_card_types_type_id");

                    b.Navigation("Language");

                    b.Navigation("Owner");

                    b.Navigation("Rarity");

                    b.Navigation("Set");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("DiceClub.Database.Entities.MtgCards.MtgCardLegalityRelEntity", b =>
                {
                    b.HasOne("DiceClub.Database.Entities.MtgCards.MtgCardEntity", "Card")
                        .WithMany("Legalities")
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_mtg_cards_legalities_mtg_cards_card_id");

                    b.HasOne("DiceClub.Database.Entities.MtgCards.MtgCardLegalityEntity", "CardLegality")
                        .WithMany()
                        .HasForeignKey("CardLegalityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_mtg_cards_legalities_mtg_legalities_card_legality_id");

                    b.HasOne("DiceClub.Database.Entities.MtgCards.MtgCardLegalityTypeEntity", "CardLegalityType")
                        .WithMany()
                        .HasForeignKey("CardLegalityTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_mtg_cards_legalities_mtg_card_legality_types_card_legality_");

                    b.Navigation("Card");

                    b.Navigation("CardLegality");

                    b.Navigation("CardLegalityType");
                });

            modelBuilder.Entity("DiceClub.Database.Entities.MtgCards.MtgCardStageEntity", b =>
                {
                    b.HasOne("DiceClub.Database.Entities.MtgCards.MtgCardLanguageEntity", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_cards_staging_mtg_languages_language_id");

                    b.HasOne("DiceClub.Database.Entities.Account.DiceClubUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_cards_staging_users_user_id");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DiceClub.Database.Entities.Account.DiceClubGroup", b =>
                {
                    b.Navigation("UserGroups");
                });

            modelBuilder.Entity("DiceClub.Database.Entities.Account.DiceClubUser", b =>
                {
                    b.Navigation("UserGroups");
                });

            modelBuilder.Entity("DiceClub.Database.Entities.Deck.DeckMasterEntity", b =>
                {
                    b.Navigation("Details");
                });

            modelBuilder.Entity("DiceClub.Database.Entities.MtgCards.MtgCardEntity", b =>
                {
                    b.Navigation("Colors");

                    b.Navigation("Legalities");
                });

            modelBuilder.Entity("DiceClub.Database.Entities.MtgCards.MtgCardLanguageEntity", b =>
                {
                    b.Navigation("Cards");
                });
#pragma warning restore 612, 618
        }
    }
}
