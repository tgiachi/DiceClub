// <auto-generated />
using System;
using DiceClub.Api.Data.Cards.Mtg;
using DiceClub.Database.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using NpgsqlTypes;

#nullable disable

namespace DiceClub.Database.Migrations
{
    [DbContext(typeof(DiceClubDbContext))]
    [Migration("20220919130119_AddedCardStaging")]
    partial class AddedCardStaging
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DiceClub.Database.Entities.Account.DiceClubGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("group_name");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("boolean")
                        .HasColumnName("is_admin");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_groups");

                    b.ToTable("groups", (string)null);
                });

            modelBuilder.Entity("DiceClub.Database.Entities.Account.DiceClubUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Last")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("last");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("NickName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nick_name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("password");

                    b.Property<string>("RefreshToken")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("refresh_token");

                    b.Property<string>("SerialId")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("serial_id");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_users_email");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("DiceClub.Database.Entities.Account.UserGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("group_id");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_groups");

                    b.HasIndex("GroupId")
                        .HasDatabaseName("ix_user_groups_group_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_groups_user_id");

                    b.ToTable("user_groups", (string)null);
                });

            modelBuilder.Entity("DiceClub.Database.Entities.Cards.CardCardLegality", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CardId")
                        .HasColumnType("uuid")
                        .HasColumnName("card_id");

                    b.Property<Guid>("CardLegalityId")
                        .HasColumnType("uuid")
                        .HasColumnName("card_legality_id");

                    b.Property<Guid>("CardLegalityTypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("card_legality_type_id");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_card_card_legality");

                    b.HasIndex("CardId")
                        .HasDatabaseName("ix_card_card_legality_card_id");

                    b.HasIndex("CardLegalityId")
                        .HasDatabaseName("ix_card_card_legality_card_legality_id");

                    b.HasIndex("CardLegalityTypeId")
                        .HasDatabaseName("ix_card_card_legality_card_legality_type_id");

                    b.ToTable("card_card_legality", (string)null);
                });

            modelBuilder.Entity("DiceClub.Database.Entities.Cards.CardEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CardName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("card_name");

                    b.Property<Guid>("CardSetId")
                        .HasColumnType("uuid")
                        .HasColumnName("card_set_id");

                    b.Property<Guid>("CardTypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("card_type_id");

                    b.Property<int>("CollectionNumber")
                        .HasColumnType("integer")
                        .HasColumnName("collection_number");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<Guid?>("CreatureTypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("creature_type_id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(3000)
                        .HasColumnType("character varying(3000)")
                        .HasColumnName("description");

                    b.Property<bool>("IlMultiColor")
                        .HasColumnType("boolean")
                        .HasColumnName("il_multi_color");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("image_url");

                    b.Property<bool>("IsColorLess")
                        .HasColumnType("boolean")
                        .HasColumnName("is_color_less");

                    b.Property<string>("ManaCost")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("mana_cost");

                    b.Property<int?>("MtgId")
                        .HasColumnType("integer")
                        .HasColumnName("mtg_id");

                    b.Property<decimal?>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<Guid>("RarityId")
                        .HasColumnType("uuid")
                        .HasColumnName("rarity_id");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasColumnName("search_vector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "italian")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "CardName", "Description", "TypeLine" });

                    b.Property<int>("TotalManaCosts")
                        .HasColumnType("integer")
                        .HasColumnName("total_mana_costs");

                    b.Property<string>("TypeLine")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("type_line");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_cards");

                    b.HasIndex("CardSetId")
                        .HasDatabaseName("ix_cards_card_set_id");

                    b.HasIndex("CardTypeId")
                        .HasDatabaseName("ix_cards_card_type_id");

                    b.HasIndex("CreatureTypeId")
                        .HasDatabaseName("ix_cards_creature_type_id");

                    b.HasIndex("RarityId")
                        .HasDatabaseName("ix_cards_rarity_id");

                    b.HasIndex("SearchVector")
                        .HasDatabaseName("ix_cards_search_vector");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("SearchVector"), "GIN");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_cards_user_id");

                    b.ToTable("cards", (string)null);
                });

            modelBuilder.Entity("DiceClub.Database.Entities.Cards.CardLegalityEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_card_legalities");

                    b.ToTable("card_legalities", (string)null);
                });

            modelBuilder.Entity("DiceClub.Database.Entities.Cards.CardLegalityTypeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_card_lagality_types");

                    b.ToTable("card_lagality_types", (string)null);
                });

            modelBuilder.Entity("DiceClub.Database.Entities.Cards.CardSetEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("image");

                    b.Property<string>("SetCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("set_code");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_card_sets");

                    b.ToTable("card_sets", (string)null);
                });

            modelBuilder.Entity("DiceClub.Database.Entities.Cards.CardStagingEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<bool>("IsAdded")
                        .HasColumnType("boolean")
                        .HasColumnName("is_added");

                    b.Property<bool>("IsFoil")
                        .HasColumnType("boolean")
                        .HasColumnName("is_foil");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("language");

                    b.Property<int?>("MtgId")
                        .HasColumnType("integer")
                        .HasColumnName("mtg_id");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_cards_staging");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_cards_staging_user_id");

                    b.ToTable("cards_staging", (string)null);
                });

            modelBuilder.Entity("DiceClub.Database.Entities.Cards.CardTypeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CardType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("card_type");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_card_types");

                    b.ToTable("card_types", (string)null);
                });

            modelBuilder.Entity("DiceClub.Database.Entities.Cards.ColorCardEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CardId")
                        .HasColumnType("uuid")
                        .HasColumnName("card_id");

                    b.Property<Guid>("ColorId")
                        .HasColumnType("uuid")
                        .HasColumnName("color_id");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_color_card");

                    b.HasIndex("CardId")
                        .HasDatabaseName("ix_color_card_card_id");

                    b.HasIndex("ColorId")
                        .HasDatabaseName("ix_color_card_color_id");

                    b.ToTable("color_card", (string)null);
                });

            modelBuilder.Entity("DiceClub.Database.Entities.Cards.CreatureTypeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_creatures_type");

                    b.ToTable("creatures_type", (string)null);
                });

            modelBuilder.Entity("DiceClub.Database.Entities.Cards.Deck.DeckDetailEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CardId")
                        .HasColumnType("uuid")
                        .HasColumnName("card_id");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<Guid>("DeckMasterId")
                        .HasColumnType("uuid")
                        .HasColumnName("deck_master_id");

                    b.Property<long>("Quantity")
                        .HasColumnType("bigint")
                        .HasColumnName("quantity");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_deck_details");

                    b.HasIndex("CardId")
                        .HasDatabaseName("ix_deck_details_card_id");

                    b.HasIndex("DeckMasterId")
                        .HasDatabaseName("ix_deck_details_deck_master_id");

                    b.ToTable("deck_details", (string)null);
                });

            modelBuilder.Entity("DiceClub.Database.Entities.Cards.Deck.DeckMasterEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_deck_master");

                    b.ToTable("deck_master", (string)null);
                });

            modelBuilder.Entity("DiceClub.Database.Entities.Cards.MtgEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<MtgCard>("Card")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("card");

                    b.Property<string>("CardName")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("card_name");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("ForeignNames")
                        .IsRequired()
                        .HasMaxLength(3000)
                        .HasColumnType("character varying(3000)")
                        .HasColumnName("foreign_names");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text")
                        .HasColumnName("image_url");

                    b.Property<int?>("MultiverseId")
                        .HasColumnType("integer")
                        .HasColumnName("multiverse_id");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasColumnName("search_vector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "italian")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "CardName", "ForeignNames" });

                    b.Property<string>("SetCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("set_code");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_mtg_dump");

                    b.HasIndex("SearchVector")
                        .HasDatabaseName("ix_mtg_dump_search_vector");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("SearchVector"), "GIN");

                    b.ToTable("mtg_dump", (string)null);
                });

            modelBuilder.Entity("DiceClub.Database.Entities.Cards.RarityEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_rarity");

                    b.ToTable("rarity", (string)null);
                });

            modelBuilder.Entity("DiceClub.Database.Entities.Inventory.Inventory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Author")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("author");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("category_id");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(3000)
                        .HasColumnType("character varying(3000)")
                        .HasColumnName("description");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("image");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("owner_id");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("serial_number");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_inventory");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("ix_inventory_category_id");

                    b.HasIndex("OwnerId")
                        .HasDatabaseName("ix_inventory_owner_id");

                    b.ToTable("inventory", (string)null);
                });

            modelBuilder.Entity("DiceClub.Database.Entities.Inventory.InventoryCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("ParserType")
                        .HasColumnType("text")
                        .HasColumnName("parser_type");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_inventory_category");

                    b.ToTable("inventory_category", (string)null);
                });

            modelBuilder.Entity("DiceClub.Database.Entities.Inventory.InventoryMovement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ApproverId")
                        .HasColumnType("uuid")
                        .HasColumnName("approver_id");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<DateTime>("ExpireDateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("expire_date_time");

                    b.Property<Guid>("InventoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("inventory_id");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("boolean")
                        .HasColumnName("is_approved");

                    b.Property<string>("MovementType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("movement_type");

                    b.Property<Guid>("ReceiverId")
                        .HasColumnType("uuid")
                        .HasColumnName("receiver_id");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_inventory_movements");

                    b.HasIndex("ApproverId")
                        .HasDatabaseName("ix_inventory_movements_approver_id");

                    b.HasIndex("InventoryId")
                        .HasDatabaseName("ix_inventory_movements_inventory_id");

                    b.HasIndex("ReceiverId")
                        .HasDatabaseName("ix_inventory_movements_receiver_id");

                    b.ToTable("inventory_movements", (string)null);
                });

            modelBuilder.Entity("Mtg.Collection.Manager.Database.Entities.ColorEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_colors");

                    b.ToTable("colors", (string)null);
                });

            modelBuilder.Entity("DiceClub.Database.Entities.Account.UserGroup", b =>
                {
                    b.HasOne("DiceClub.Database.Entities.Account.DiceClubGroup", "Group")
                        .WithMany("UserGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_groups_groups_group_id");

                    b.HasOne("DiceClub.Database.Entities.Account.DiceClubUser", "User")
                        .WithMany("UserGroups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_groups_users_user_id");

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DiceClub.Database.Entities.Cards.CardCardLegality", b =>
                {
                    b.HasOne("DiceClub.Database.Entities.Cards.CardEntity", "Card")
                        .WithMany("CardLegalities")
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_card_card_legality_cards_card_id");

                    b.HasOne("DiceClub.Database.Entities.Cards.CardLegalityEntity", "CardLegality")
                        .WithMany()
                        .HasForeignKey("CardLegalityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_card_card_legality_card_legalities_card_legality_id");

                    b.HasOne("DiceClub.Database.Entities.Cards.CardLegalityTypeEntity", "CardLegalityType")
                        .WithMany()
                        .HasForeignKey("CardLegalityTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_card_card_legality_card_lagality_types_card_legality_type_id");

                    b.Navigation("Card");

                    b.Navigation("CardLegality");

                    b.Navigation("CardLegalityType");
                });

            modelBuilder.Entity("DiceClub.Database.Entities.Cards.CardEntity", b =>
                {
                    b.HasOne("DiceClub.Database.Entities.Cards.CardSetEntity", "CardSet")
                        .WithMany("Cards")
                        .HasForeignKey("CardSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_cards_card_sets_card_set_id");

                    b.HasOne("DiceClub.Database.Entities.Cards.CardTypeEntity", "CardType")
                        .WithMany("Cards")
                        .HasForeignKey("CardTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_cards_card_types_card_type_id");

                    b.HasOne("DiceClub.Database.Entities.Cards.CreatureTypeEntity", "CreatureType")
                        .WithMany("Cards")
                        .HasForeignKey("CreatureTypeId")
                        .HasConstraintName("fk_cards_creatures_type_creature_type_id");

                    b.HasOne("DiceClub.Database.Entities.Cards.RarityEntity", "Rarity")
                        .WithMany()
                        .HasForeignKey("RarityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_cards_rarity_rarity_id");

                    b.HasOne("DiceClub.Database.Entities.Account.DiceClubUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_cards_users_user_id");

                    b.Navigation("CardSet");

                    b.Navigation("CardType");

                    b.Navigation("CreatureType");

                    b.Navigation("Rarity");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DiceClub.Database.Entities.Cards.CardStagingEntity", b =>
                {
                    b.HasOne("DiceClub.Database.Entities.Account.DiceClubUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_cards_staging_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DiceClub.Database.Entities.Cards.ColorCardEntity", b =>
                {
                    b.HasOne("DiceClub.Database.Entities.Cards.CardEntity", "Card")
                        .WithMany("ColorCards")
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_color_card_cards_card_id");

                    b.HasOne("Mtg.Collection.Manager.Database.Entities.ColorEntity", "Color")
                        .WithMany("ColorCards")
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_color_card_colors_color_id");

                    b.Navigation("Card");

                    b.Navigation("Color");
                });

            modelBuilder.Entity("DiceClub.Database.Entities.Cards.Deck.DeckDetailEntity", b =>
                {
                    b.HasOne("DiceClub.Database.Entities.Cards.CardEntity", "Card")
                        .WithMany()
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_deck_details_cards_card_id");

                    b.HasOne("DiceClub.Database.Entities.Cards.Deck.DeckMasterEntity", "DeckMaster")
                        .WithMany("Details")
                        .HasForeignKey("DeckMasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_deck_details_deck_master_deck_master_id");

                    b.Navigation("Card");

                    b.Navigation("DeckMaster");
                });

            modelBuilder.Entity("DiceClub.Database.Entities.Inventory.Inventory", b =>
                {
                    b.HasOne("DiceClub.Database.Entities.Inventory.InventoryCategory", "Category")
                        .WithMany("Inventories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_inventory_inventory_category_category_id");

                    b.HasOne("DiceClub.Database.Entities.Account.DiceClubUser", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .HasConstraintName("fk_inventory_users_owner_id");

                    b.Navigation("Category");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("DiceClub.Database.Entities.Inventory.InventoryMovement", b =>
                {
                    b.HasOne("DiceClub.Database.Entities.Account.DiceClubUser", "Approver")
                        .WithMany()
                        .HasForeignKey("ApproverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_inventory_movements_users_approver_id");

                    b.HasOne("DiceClub.Database.Entities.Inventory.Inventory", "Inventory")
                        .WithMany()
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_inventory_movements_inventory_inventory_id");

                    b.HasOne("DiceClub.Database.Entities.Account.DiceClubUser", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_inventory_movements_users_receiver_id");

                    b.Navigation("Approver");

                    b.Navigation("Inventory");

                    b.Navigation("Receiver");
                });

            modelBuilder.Entity("DiceClub.Database.Entities.Account.DiceClubGroup", b =>
                {
                    b.Navigation("UserGroups");
                });

            modelBuilder.Entity("DiceClub.Database.Entities.Account.DiceClubUser", b =>
                {
                    b.Navigation("UserGroups");
                });

            modelBuilder.Entity("DiceClub.Database.Entities.Cards.CardEntity", b =>
                {
                    b.Navigation("CardLegalities");

                    b.Navigation("ColorCards");
                });

            modelBuilder.Entity("DiceClub.Database.Entities.Cards.CardSetEntity", b =>
                {
                    b.Navigation("Cards");
                });

            modelBuilder.Entity("DiceClub.Database.Entities.Cards.CardTypeEntity", b =>
                {
                    b.Navigation("Cards");
                });

            modelBuilder.Entity("DiceClub.Database.Entities.Cards.CreatureTypeEntity", b =>
                {
                    b.Navigation("Cards");
                });

            modelBuilder.Entity("DiceClub.Database.Entities.Cards.Deck.DeckMasterEntity", b =>
                {
                    b.Navigation("Details");
                });

            modelBuilder.Entity("DiceClub.Database.Entities.Inventory.InventoryCategory", b =>
                {
                    b.Navigation("Inventories");
                });

            modelBuilder.Entity("Mtg.Collection.Manager.Database.Entities.ColorEntity", b =>
                {
                    b.Navigation("ColorCards");
                });
#pragma warning restore 612, 618
        }
    }
}
