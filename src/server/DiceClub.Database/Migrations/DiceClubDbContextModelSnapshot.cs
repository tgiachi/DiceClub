// <auto-generated />
using System;
using DiceClub.Database.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DiceClub.Database.Migrations
{
    [DbContext(typeof(DiceClubDbContext))]
    partial class DiceClubDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DiceClub.Database.Entities.Account.DiceClubGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("group_name");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("boolean")
                        .HasColumnName("is_admin");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_groups");

                    b.ToTable("groups", (string)null);
                });

            modelBuilder.Entity("DiceClub.Database.Entities.Account.DiceClubUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Last")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("last");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("NickName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nick_name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("password");

                    b.Property<string>("SerialId")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("serial_id");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_users_email");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("DiceClub.Database.Entities.Account.UserGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("group_id");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_groups");

                    b.HasIndex("GroupId")
                        .HasDatabaseName("ix_user_groups_group_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_groups_user_id");

                    b.ToTable("user_groups", (string)null);
                });

            modelBuilder.Entity("DiceClub.Database.Entities.Inventory.Inventory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("category_id");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(3000)
                        .HasColumnType("character varying(3000)")
                        .HasColumnName("description");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("image");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("owner_id");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("serial_number");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_inventory");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("ix_inventory_category_id");

                    b.HasIndex("OwnerId")
                        .HasDatabaseName("ix_inventory_owner_id");

                    b.ToTable("inventory", (string)null);
                });

            modelBuilder.Entity("DiceClub.Database.Entities.Inventory.InventoryCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("ParserType")
                        .HasColumnType("text")
                        .HasColumnName("parser_type");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_inventory_category");

                    b.ToTable("inventory_category", (string)null);
                });

            modelBuilder.Entity("DiceClub.Database.Entities.Inventory.InventoryMovement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ApproverId")
                        .HasColumnType("uuid")
                        .HasColumnName("approver_id");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<DateTime>("ExpireDateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("expire_date_time");

                    b.Property<Guid>("InventoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("inventory_id");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("boolean")
                        .HasColumnName("is_approved");

                    b.Property<string>("MovementType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("movement_type");

                    b.Property<Guid>("ReceiverId")
                        .HasColumnType("uuid")
                        .HasColumnName("receiver_id");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_inventory_movements");

                    b.HasIndex("ApproverId")
                        .HasDatabaseName("ix_inventory_movements_approver_id");

                    b.HasIndex("InventoryId")
                        .HasDatabaseName("ix_inventory_movements_inventory_id");

                    b.HasIndex("ReceiverId")
                        .HasDatabaseName("ix_inventory_movements_receiver_id");

                    b.ToTable("inventory_movements", (string)null);
                });

            modelBuilder.Entity("DiceClub.Database.Entities.Account.UserGroup", b =>
                {
                    b.HasOne("DiceClub.Database.Entities.Account.DiceClubGroup", "Group")
                        .WithMany("UserGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_groups_groups_group_id");

                    b.HasOne("DiceClub.Database.Entities.Account.DiceClubUser", "User")
                        .WithMany("UserGroups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_groups_users_user_id");

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DiceClub.Database.Entities.Inventory.Inventory", b =>
                {
                    b.HasOne("DiceClub.Database.Entities.Inventory.InventoryCategory", "Category")
                        .WithMany("Inventories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_inventory_inventory_category_category_id");

                    b.HasOne("DiceClub.Database.Entities.Account.DiceClubUser", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .HasConstraintName("fk_inventory_users_owner_id");

                    b.Navigation("Category");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("DiceClub.Database.Entities.Inventory.InventoryMovement", b =>
                {
                    b.HasOne("DiceClub.Database.Entities.Account.DiceClubUser", "Approver")
                        .WithMany()
                        .HasForeignKey("ApproverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_inventory_movements_users_approver_id");

                    b.HasOne("DiceClub.Database.Entities.Inventory.Inventory", "Inventory")
                        .WithMany()
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_inventory_movements_inventory_inventory_id");

                    b.HasOne("DiceClub.Database.Entities.Account.DiceClubUser", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_inventory_movements_users_receiver_id");

                    b.Navigation("Approver");

                    b.Navigation("Inventory");

                    b.Navigation("Receiver");
                });

            modelBuilder.Entity("DiceClub.Database.Entities.Account.DiceClubGroup", b =>
                {
                    b.Navigation("UserGroups");
                });

            modelBuilder.Entity("DiceClub.Database.Entities.Account.DiceClubUser", b =>
                {
                    b.Navigation("UserGroups");
                });

            modelBuilder.Entity("DiceClub.Database.Entities.Inventory.InventoryCategory", b =>
                {
                    b.Navigation("Inventories");
                });
#pragma warning restore 612, 618
        }
    }
}
